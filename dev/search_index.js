var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Thunks","category":"page"},{"location":"#Thunks","page":"Home","title":"Thunks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Thunks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Thunks]","category":"page"},{"location":"#Thunks.Thunk","page":"Home","title":"Thunks.Thunk","text":"\"     Thunk(function, args, kwargs)\n\nType that represents a thunk. Useful fields inclue:\n\n    evaluated::Bool\n    result::Any\n\n\n\n\n\n","category":"type"},{"location":"#Thunks.reify-Tuple{Thunk}","page":"Home","title":"Thunks.reify","text":"reify(thunk::Thunk)\nreify(value::Any)\n\nReify a thunk into a value.\n\nWalk through the thunk's arguments, recursively evaluating each one, and then evaluating the thunk's function with the evaluated arguments.\n\n\n\n\n\n","category":"method"},{"location":"#Thunks.thunkify-Tuple{Any}","page":"Home","title":"Thunks.thunkify","text":"Turn expression into a thunk. Supports :call, :(=), :block.\n\nNot intended for public usage.\n\n\n\n\n\n","category":"method"},{"location":"#Thunks.@thunk-Tuple{Any}","page":"Home","title":"Thunks.@thunk","text":"@thunk\n\nMacro for turning an expression into a thunk. Supports lines like:\n\n@thunk x+y\n@thunk x = f(y)\nabc = @thunk begin\n    a = 1\n    b = 2\n    c = 3\n    sum([a,b,c])\nend\n\n\n\n\n\n","category":"macro"}]
}
